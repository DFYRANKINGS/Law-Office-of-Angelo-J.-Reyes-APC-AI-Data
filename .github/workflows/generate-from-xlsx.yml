name: Generate JSON/YAML from XLSX and Update Sitemap

on:
  workflow_dispatch: {}          # allow manual runs
  push:
    branches: [ main ]           # run on any push to main
    paths:
      - 'templates/*.xlsx'       # (still narrows auto-triggers, but we will run unconditionally below)
      - 'ai-generators/**'
      - '.github/workflows/**'

jobs:
  generate-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Configure Git (identity + safe dir)
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name  "GitHub Action"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git remote set-url origin "https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install pandas openpyxl PyYAML

      # üîÅ Always run the generator against the newest XLSX in templates/, even if content didn't change
      - name: Find newest XLSX in templates/
        id: pick_xlsx
        shell: bash
        run: |
          set -e
          if ls templates/*.xlsx >/dev/null 2>&1; then
            NEWEST=$(ls -t templates/*.xlsx | head -n1)
            echo "xlsx_path=$NEWEST" >> $GITHUB_OUTPUT
            echo "üìÑ Using XLSX: $NEWEST"
          else
            echo "‚ùå No XLSX found under templates/"
            exit 1
          fi

      - name: Run generator
        run: |
          echo "‚öôÔ∏è Generating schema files from: ${{ steps.pick_xlsx.outputs.xlsx_path }}"
          python ai-generators/generate_files_from_xlsx.py --input "${{ steps.pick_xlsx.outputs.xlsx_path }}"

      # Ensure folders exist (keeps repo structure when sheets are empty)
      - name: Ensure schemas/ directories exist
        run: |
          mkdir -p schemas/{organization,services,products,faqs,help-articles,reviews,locations,team,awards,press,case-studies}
          # remove placeholder .gitkeep if real files exist; keep only if directory empty
          for d in schemas/*; do
            [ -d "$d" ] || continue
            if compgen -G "$d/*" > /dev/null; then
              rm -f "$d/.gitkeep" || true
            else
              touch "$d/.gitkeep"
            fi
          done

      # üßæ Verify outputs and fail clearly if FAQs/Help Articles are missing
      - name: Verify generated outputs
        shell: bash
        run: |
          echo "üîç Listing generated files:"
          find schemas -type f \( -name "*.json" -o -name "*.yaml" -o -name "*.yml" -o -name "*.md" -o -name "*.llm" \) | sort || true
          echo
          FAQ_COUNT=$(find schemas/faqs -maxdepth 1 -type f ! -name ".gitkeep" 2>/dev/null | wc -l | tr -d ' ')
          HELP_COUNT=$(find schemas/help-articles -maxdepth 1 -type f ! -name ".gitkeep" 2>/dev/null | wc -l | tr -d ' ')
          echo "üìä FAQs: $FAQ_COUNT   |   Help Articles: $HELP_COUNT"
          # If your sheets should produce files, enforce it:
          if [ "$FAQ_COUNT" -eq 0 ]; then
            echo "‚ö†Ô∏è No FAQ files generated. Check sheet name 'FAQs' and required columns: question, answer, (optional) slug."
          fi
          if [ "$HELP_COUNT" -eq 0 ]; then
            echo "‚ö†Ô∏è No Help Article files generated. Check sheet name 'Help Articles' and required columns: title, article, (optional) slug."
          fi

      - name: Generate or Update Sitemap
        run: |
          python generate_sitemaps.py || true
          touch ai-sitemap.xml

      # üõ°Ô∏è Avoid non-fast-forward errors
      - name: Pull (rebase) before push
        run: |
          git fetch origin main
          git pull --rebase origin main || true

      - name: Commit & Push
        run: |
          git add --all
          echo "üì¶ STAGED CHANGES:"
          git status --short || true
          git commit -m "ü§ñ Auto-generate schema + sitemap ($(date -u +'%Y-%m-%d %H:%M:%S UTC'))" || echo "‚úÖ No changes to commit"
          echo "üöÄ Pushing to main‚Ä¶"
          git push origin main
